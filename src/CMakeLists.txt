function(ConfigureBinary BIN_NAME BIN_SRC OUT_NAME)
  add_executable(${BIN_NAME} ${BIN_SRC})
  target_link_libraries(
    ${BIN_NAME}
    ${CLIENT_NAME} ${CORE_NAME}
    ${Boost_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  if (WITH_PYTHON)
    target_link_libraries(${BIN_NAME} ${PYTHON_LIBRARIES})
  endif()
  set_target_properties(${BIN_NAME} PROPERTIES OUTPUT_NAME "${OUT_NAME}")
  if(WITH_STATIC)
    if(NOT MINGW)
      set_target_properties(${BIN_NAME} PROPERTIES LINK_FLAGS "-static-libgcc -static-libstdc++")
    endif()
    if(CLANG AND NOT (ARM OR ANDROID) )
      set_target_properties(${BIN_NAME} PROPERTIES LINK_FLAGS "-lstdc++")
      if(FREEBSD)
        set_target_properties(${BIN_NAME} PROPERTIES LINK_FLAGS "-lm -lc++")
      endif()
    endif()
    # Note: On FreeBSD 10.3-RELEASE-p4 and 11, GCC 4.9.4+/Clang 3.6+ apparently started to *silently* drop -static-libgcc -static-libstdc++ during linkage so, we add -static here
    if(FREEBSD OR MINGW)
      set_target_properties(${BIN_NAME} PROPERTIES LINK_FLAGS "-static")
    endif()
  endif()
  if(MINGW)
    target_link_libraries(${BIN_NAME} wsock32 iphlpapi ws2_32)
  endif()
  if(WITH_HARDENING AND CMAKE_CXX_COMPILER_ID STREQUAL GNU)
    set_target_properties(${BIN_NAME} PROPERTIES LINK_FLAGS "-z relro -z now")
  endif()
  # FindBoost pulls pthread for thread which is broken for static linking
  # (at least on Ubuntu 15.04)
  list(GET Boost_LIBRARIES -1 LAST_Boost_LIBRARIES)
  if(${LAST_Boost_LIBRARIES} MATCHES ".*pthread.*")
    list(REMOVE_AT Boost_LIBRARIES -1)
  endif()
  if(MSVC)
    install(FILES
      $<TARGET_PDB_FILE:${BIN_NAME}> DESTINATION "bin" CONFIGURATIONS DEBUG)
  endif()
endfunction()

add_subdirectory(app)
add_subdirectory(client)
add_subdirectory(core)
add_subdirectory(util)
